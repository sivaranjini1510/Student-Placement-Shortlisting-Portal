const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { Document, Packer, Paragraph, TextRun, Table, TableCell, TableRow, WidthType } = require('docx');

// @desc    Generate shortlist PDF
// @param   companyData - Company details and shortlisted students
// @param   filename - Output filename
// @returns Buffer or saves to file
const generateShortlistPDF = (companyData, filename = 'shortlist.pdf') => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const filePath = path.join(__dirname, '..', 'downloads', filename);
    
    // Ensure downloads directory exists
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // Shortlisted Students
    doc.fontSize(16).text(`Shortlisted Students (${companyData.shortlist.length}):`, { underline: true });
    doc.moveDown();

    companyData.shortlist.forEach((item, index) => {
      const student = item.student;
      doc.fontSize(12).text(`${index + 1}. ${student.fullName}`);
      doc.text(`   - Username: ${student.username || student.collegeEmail}`);
      doc.text(`   - Department: ${student.department}`);
      doc.text(`   - Email: ${student.collegeEmail}`);
      doc.text(`   - Contact: ${student.studentContact}`);
      doc.text(`   - CGPA: ${student.cgpa}`);
      if (student.keySkills && student.keySkills.length > 0) {
        doc.text(`   - Skills: ${student.keySkills.join(', ')}`);
      }
      doc.moveDown(0.5);
    });

    // Footer
    doc.moveDown();
    doc.fontSize(10).text('Generated by NEC Placement Portal', { align: 'center' });
    doc.text(`Report Date: ${new Date().toDateString()}`, { align: 'center' });

    doc.end();

    stream.on('finish', () => {
      resolve(filePath);
    });

    stream.on('error', reject);
  });
};

// @desc    Generate student profile PDF
// @param   studentData - Student profile data
// @param   filename - Output filename
const generateStudentProfilePDF = (studentData, filename = 'student-profile.pdf') => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const filePath = path.join(__dirname, '..', 'downloads', filename);

    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // Header
    doc.fontSize(18).text('Student Profile', { align: 'center' });
    doc.moveDown();
    doc.fontSize(14).text(`${studentData.fullName}`);
    doc.text(`Department: ${studentData.department} | Degree: ${studentData.degree}`);
    doc.text(`CGPA: ${studentData.cgpa} | Status: ${studentData.placementStatus}`);
    doc.moveDown();

    // Basic Information
    doc.fontSize(16).text('Basic Information:', { underline: true });
    doc.fontSize(12).text(`Gender: ${studentData.gender}`);
    doc.text(`Tutor: ${studentData.tutorName}`);
    doc.text(`DOB: ${new Date(studentData.dateOfBirth).toDateString()}`);
    doc.text(`College Email: ${studentData.collegeEmail}`);
    doc.text(`Personal Email: ${studentData.personalEmail}`);
    doc.text(`Contact: ${studentData.studentContact}`);
    doc.moveDown();

    // Academic Records
    doc.fontSize(16).text('Academic Records:', { underline: true });
    doc.text(`SSLC: ${studentData.sslc.percentage}% (${studentData.sslc.yearOfPassing})`);
    doc.text(`HSC: ${studentData.hsc.percentage}% (${studentData.hsc.yearOfPassing})`);
    if (studentData.diploma) {
      doc.text(`Diploma: ${studentData.diploma.percentage}% (${studentData.diploma.yearOfPassing})`);
    }
    doc.text(`Semester GPAs: ${studentData.semesterGPA.map(s => `Sem ${s.semester}: ${s.gpa}`).join(', ')}`);
    doc.text(`Arrears: Total ${studentData.arrears.total}, Current ${studentData.arrears.current}`);
    doc.moveDown();

    // Other Details
    doc.fontSize(16).text('Additional Details:', { underline: true });
    if (studentData.keySkills.length > 0) {
      doc.text(`Skills: ${studentData.keySkills.join(', ')}`);
    }
    doc.text(`Aadhaar: ${studentData.aadhaarNumber || 'N/A'}`);
    doc.text(`PAN: ${studentData.panNumber || 'N/A'}`);
    doc.text(`Blood Group: ${studentData.bloodGroup || 'N/A'}`);
    doc.text(`Accommodation: ${studentData.accommodation || 'N/A'}`);
    doc.moveDown();

    // Parent Details
    doc.fontSize(16).text('Parent Details:', { underline: true });
    doc.text(`Father: ${studentData.father.name}, ${studentData.father.occupation}, Income: ₹${studentData.father.annualIncome}, Contact: ${studentData.father.contactNumber}`);
    doc.text(`Mother: ${studentData.mother.name}, ${studentData.mother.occupation}, Income: ₹${studentData.mother.annualIncome}, Contact: ${studentData.mother.contactNumber}`);
    doc.moveDown();

    // Address
    doc.fontSize(16).text('Address:', { underline: true });
    doc.text(`${studentData.address.permanentAddress}, ${studentData.address.city}, ${studentData.address.district} - ${studentData.address.pincode}, ${studentData.address.state}`);
    doc.text(`Native Place: ${studentData.address.nativePlace}`);

    // Footer
    doc.moveDown();
    doc.fontSize(10).text('Generated by NEC Placement Portal', { align: 'center' });

    doc.end();

    stream.on('finish', () => {
      resolve(filePath);
    });

    stream.on('error', reject);
  });
};

// @desc    Generate feedbacks PDF
// @param   feedbacks - Array of feedback data with populated student info
// @param   filename - Output filename
const generateFeedbacksPDF = (feedbacks, filename = 'feedbacks.pdf') => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const filePath = path.join(__dirname, '..', 'downloads', filename);

    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // Header
    doc.fontSize(20).text('NEC Placement Portal', { align: 'center' });
    doc.moveDown();
    doc.fontSize(16).text('Student Placement Feedbacks', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Total Feedbacks: ${feedbacks.length}`, { align: 'center' });
    doc.text(`Generated on: ${new Date().toDateString()}`, { align: 'center' });
    doc.moveDown(2);

    feedbacks.forEach((feedback, index) => {
      // Feedback Header
      doc.fontSize(14).text(`${index + 1}. ${feedback.companyName}`, { underline: true });
      doc.moveDown(0.5);

      // Student Details
      doc.fontSize(12).text(`Student: ${feedback.student.fullName} (${feedback.student.username})`);
      doc.text(`Department: ${feedback.student.department}`);
      doc.text(`Email: ${feedback.student.collegeEmail}`);
      doc.moveDown(0.5);

      // Placement Details
      doc.text(`Role: ${feedback.jobRole}`);
      doc.text(`Package: ${feedback.ctc} LPA`);
      doc.text(`Placement Date: ${new Date(feedback.placementDate).toLocaleDateString()}`);
      doc.text(`Submitted: ${new Date(feedback.submittedDate).toLocaleDateString()}`);
      doc.text(`Status: ${feedback.status}`);
      doc.moveDown();

      // Separator
      doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();
      doc.moveDown();
    });

    // Footer
    doc.moveDown();
    doc.fontSize(10).text('Generated by NEC Placement Portal', { align: 'center' });

    doc.end();

    stream.on('finish', () => {
      resolve(filePath);
    });

    stream.on('error', reject);
  });
};

// @desc    Generate placed students list PDF
// @param   students - Array of placed students
// @returns Buffer
const generatePlacedStudentsListPDF = (students) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const buffers = [];

    doc.on('data', buffers.push.bind(buffers));
    doc.on('end', () => {
      const pdfBuffer = Buffer.concat(buffers);
      resolve(pdfBuffer);
    });

    // Header
    doc.fontSize(20).text('NEC Placement Portal', { align: 'center' });
    doc.moveDown();
    doc.fontSize(16).text('Placed Students List', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Total Placed Students: ${students.length}`, { align: 'center' });
    doc.text(`Generated on: ${new Date().toDateString()}`, { align: 'center' });
    doc.moveDown(2);

    // Table Header
    const tableTop = doc.y;
    const rowHeight = 15;
    const columns = [40, 65, 140, 240, 300, 340, 380, 440, 500, 560];

    // Draw header row
    doc.fontSize(9).text('S.No', 40, tableTop);
    doc.text('Name', 65, tableTop);
    doc.text('Email', 140, tableTop);
    doc.text('Department', 240, tableTop);
    doc.text('CGPA', 300, tableTop);
    doc.text('Year', 340, tableTop);
    doc.text('Company', 380, tableTop);
    doc.text('Placement Date', 440, tableTop);
    doc.text('Feedback Status', 500, tableTop);

    // Draw header borders
    doc.moveTo(40, tableTop).lineTo(560, tableTop).stroke(); // Top line
    doc.moveTo(40, tableTop + rowHeight).lineTo(560, tableTop + rowHeight).stroke(); // Bottom line
    columns.forEach(x => {
      doc.moveTo(x, tableTop).lineTo(x, tableTop + rowHeight).stroke(); // Vertical lines
    });
    doc.moveDown(2);

    // Table Rows
    students.forEach((student, index) => {
      const y = doc.y;
      doc.fontSize(8).text(`${index + 1}`, 40, y);
      doc.text((student.fullName || 'N/A').substring(0, 10), 65, y);
      doc.text((student.collegeEmail || 'N/A').substring(0, 15), 140, y);
      doc.text((student.department || 'N/A').substring(0, 10), 240, y);
      doc.text(student.cgpa ? student.cgpa.toString() : 'N/A', 300, y);
      doc.text(student.yearOfStudy ? student.yearOfStudy.toString() : 'N/A', 340, y);
      doc.text((student.placedCompany || 'N/A').substring(0, 10), 380, y);
      doc.text(student.placementDate ? new Date(student.placementDate).toLocaleDateString().substring(0, 10) : 'N/A', 440, y);
      doc.text(student.feedbackStatus === 'Completed' ? 'Submitted' : 'Not Submitted', 500, y);

      // Draw row borders
      doc.moveTo(40, y).lineTo(560, y).stroke(); // Top line
      doc.moveTo(40, y + rowHeight).lineTo(560, y + rowHeight).stroke(); // Bottom line
      columns.forEach(x => {
        doc.moveTo(x, y).lineTo(x, y + rowHeight).stroke(); // Vertical lines
      });
      doc.moveDown(1.5);
    });

    // Footer
    doc.moveDown();
    doc.fontSize(10).text('Generated by NEC Placement Portal', { align: 'center' });

    doc.end();
  });
};

// @desc    Generate not placed students list PDF
// @param   students - Array of not placed students
// @returns Buffer
const generateNotPlacedStudentsListPDF = (students) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const buffers = [];

    doc.on('data', buffers.push.bind(buffers));
    doc.on('end', () => {
      const pdfBuffer = Buffer.concat(buffers);
      resolve(pdfBuffer);
    });

    // Header
    doc.fontSize(20).text('NEC Placement Portal', { align: 'center' });
    doc.moveDown();
    doc.fontSize(16).text('Not Placed Students List', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`Total Not Placed Students: ${students.length}`, { align: 'center' });
    doc.text(`Generated on: ${new Date().toDateString()}`, { align: 'center' });
    doc.moveDown(2);

    // Table Header
    const tableTop = doc.y;
    doc.fontSize(10).text('S.No', 50, tableTop);
    doc.text('Name', 75, tableTop);
    doc.text('Email', 150, tableTop);
    doc.text('Department', 260, tableTop);
    doc.text('CGPA', 340, tableTop);
    doc.text('Year', 380, tableTop);

    // Draw table lines
    const headerHeight = 15;
    doc.moveTo(50, tableTop + headerHeight).lineTo(450, tableTop + headerHeight).stroke();
    // Vertical lines
    const columns = [50, 75, 150, 260, 340, 380, 450];
    columns.forEach(x => {
      doc.moveTo(x, tableTop).lineTo(x, tableTop + headerHeight).stroke();
    });
    doc.moveDown(2);

    // Table Rows
    students.forEach((student, index) => {
      const y = doc.y;
      doc.fontSize(9).text(`${index + 1}`, 50, y, { width: 25, align: 'center' });
      doc.text((student.fullName || 'N/A').substring(0, 12), 75, y, { width: 75, align: 'left' });
      doc.text((student.collegeEmail || 'N/A').substring(0, 18), 150, y, { width: 110, align: 'left' });
      doc.text((student.department || 'N/A').substring(0, 12), 260, y, { width: 80, align: 'left' });
      doc.text(student.cgpa ? student.cgpa.toString() : 'N/A', 340, y, { width: 40, align: 'center' });
      doc.text(student.yearOfStudy ? student.yearOfStudy.toString() : 'N/A', 380, y, { width: 70, align: 'center' });
      // Draw horizontal line for row
      doc.moveTo(50, y + 12).lineTo(450, y + 12).stroke();
      doc.moveDown(1.5);
    });

    // Footer
    doc.moveDown();
    doc.fontSize(10).text('Generated by NEC Placement Portal', { align: 'center' });

    doc.end();
  });
};

module.exports = {
  generateShortlistPDF,
  generateStudentProfilePDF,
  generateFeedbacksPDF,
  generatePlacedStudentsListPDF,
  generateNotPlacedStudentsListPDF
};
